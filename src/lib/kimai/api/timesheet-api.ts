/* tslint:disable */
/* eslint-disable */
/**
 * Kimai - API Docs
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json) 
 *
 * The version of the OpenAPI document: 0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiActivitiesIdMetaPatchRequest } from '../models';
// @ts-ignore
import { ApiTimesheetsIdRestartPatchRequest } from '../models';
// @ts-ignore
import { TimesheetCollection } from '../models';
// @ts-ignore
import { TimesheetCollectionExpanded } from '../models';
// @ts-ignore
import { TimesheetEditForm } from '../models';
// @ts-ignore
import { TimesheetEntity } from '../models';
/**
 * TimesheetApi - axios parameter creator
 * @export
 */
export const TimesheetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the collection of active timesheet records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsActiveGet: async (options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/timesheets/active`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a collection of timesheet records
         * @param {string} [user] User ID to filter timesheets. Needs permission \&#39;view_other_timesheet\&#39;, pass \&#39;all\&#39; to fetch data for all user (default: current user)
         * @param {string} [customer] DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)
         * @param {string} [customers] Comma separated list of customer IDs to filter timesheets
         * @param {string} [project] DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)
         * @param {string} [projects] Comma separated list of project IDs to filter timesheets
         * @param {string} [activity] DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)
         * @param {string} [activities] Comma separated list of activity IDs to filter timesheets
         * @param {string} [page] The page to display, renders a 404 if not found (default: 1)
         * @param {string} [size] The amount of entries for each page (default: 50)
         * @param {string} [tags] Comma separated list of tag names
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: DESC)
         * @param {string} [begin] Only records after this date will be included (format: HTML5)
         * @param {string} [end] Only records before this date will be included (format: HTML5)
         * @param {string} [exported] Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all)
         * @param {string} [active] Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all)
         * @param {string} [full] Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false)
         * @param {string} [term] Free search term
         * @param {string} [modifiedAfter] Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsGet: async (user?: string, customer?: string, customers?: string, project?: string, projects?: string, activity?: string, activities?: string, page?: string, size?: string, tags?: string, orderBy?: string, order?: string, begin?: string, end?: string, exported?: string, active?: string, full?: string, term?: string, modifiedAfter?: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/timesheets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (customers !== undefined) {
                localVarQueryParameter['customers'] = customers;
            }

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            if (projects !== undefined) {
                localVarQueryParameter['projects'] = projects;
            }

            if (activity !== undefined) {
                localVarQueryParameter['activity'] = activity;
            }

            if (activities !== undefined) {
                localVarQueryParameter['activities'] = activities;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (begin !== undefined) {
                localVarQueryParameter['begin'] = begin;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (exported !== undefined) {
                localVarQueryParameter['exported'] = exported;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (full !== undefined) {
                localVarQueryParameter['full'] = full;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (modifiedAfter !== undefined) {
                localVarQueryParameter['modified_after'] = modifiedAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an existing timesheet record
         * @param {number} id Timesheet record ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdDelete: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimesheetsIdDelete', 'id', id)
            const localVarPath = `/api/timesheets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Duplicates an existing timesheet record
         * @param {number} id Timesheet record ID to duplicate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdDuplicatePatch: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimesheetsIdDuplicatePatch', 'id', id)
            const localVarPath = `/api/timesheets/{id}/duplicate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Switch the export state of a timesheet record to (un-)lock it
         * @param {number} id Timesheet record ID to switch export state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdExportPatch: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimesheetsIdExportPatch', 'id', id)
            const localVarPath = `/api/timesheets/{id}/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns one timesheet record
         * @param {number} id Timesheet record ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdGet: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimesheetsIdGet', 'id', id)
            const localVarPath = `/api/timesheets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing timesheet.
         * @param {number} id Timesheet record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdMetaPatch: async (id: number, body?: ApiActivitiesIdMetaPatchRequest, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimesheetsIdMetaPatch', 'id', id)
            const localVarPath = `/api/timesheets/{id}/meta`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing timesheet record, you can pass all or just a subset of the attributes.
         * @summary Update an existing timesheet record
         * @param {number} id Timesheet record ID to update
         * @param {TimesheetEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdPatch: async (id: number, body: TimesheetEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimesheetsIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiTimesheetsIdPatch', 'body', body)
            const localVarPath = `/api/timesheets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restarts a previously stopped timesheet record for the current user
         * @param {number} id Timesheet record ID to restart
         * @param {ApiTimesheetsIdRestartPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdRestartPatch: async (id: number, body?: ApiTimesheetsIdRestartPatchRequest, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimesheetsIdRestartPatch', 'id', id)
            const localVarPath = `/api/timesheets/{id}/restart`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stops an active timesheet record
         * @param {number} id Timesheet record ID to stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdStopPatch: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTimesheetsIdStopPatch', 'id', id)
            const localVarPath = `/api/timesheets/{id}/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new timesheet record for the current user and returns it afterwards.
         * @summary Creates a new timesheet record
         * @param {TimesheetEditForm} body 
         * @param {string} [full] Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsPost: async (body: TimesheetEditForm, full?: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiTimesheetsPost', 'body', body)
            const localVarPath = `/api/timesheets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)

            if (full !== undefined) {
                localVarQueryParameter['full'] = full;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns the collection of recent user activities
         * @param {string} [user] User ID to filter timesheets. Needs permission \&#39;view_other_timesheet\&#39;, pass \&#39;all\&#39; to fetch data for all user (default: current user)
         * @param {string} [begin] Only records after this date will be included. Default: today - 1 year (format: HTML5)
         * @param {string} [size] The amount of entries (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsRecentGet: async (user?: string, begin?: string, size?: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/timesheets/recent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)

            if (user !== undefined) {
                localVarQueryParameter['user'] = user;
            }

            if (begin !== undefined) {
                localVarQueryParameter['begin'] = begin;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimesheetApi - functional programming interface
 * @export
 */
export const TimesheetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimesheetApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the collection of active timesheet records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsActiveGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimesheetCollectionExpanded>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsActiveGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a collection of timesheet records
         * @param {string} [user] User ID to filter timesheets. Needs permission \&#39;view_other_timesheet\&#39;, pass \&#39;all\&#39; to fetch data for all user (default: current user)
         * @param {string} [customer] DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)
         * @param {string} [customers] Comma separated list of customer IDs to filter timesheets
         * @param {string} [project] DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)
         * @param {string} [projects] Comma separated list of project IDs to filter timesheets
         * @param {string} [activity] DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)
         * @param {string} [activities] Comma separated list of activity IDs to filter timesheets
         * @param {string} [page] The page to display, renders a 404 if not found (default: 1)
         * @param {string} [size] The amount of entries for each page (default: 50)
         * @param {string} [tags] Comma separated list of tag names
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: DESC)
         * @param {string} [begin] Only records after this date will be included (format: HTML5)
         * @param {string} [end] Only records before this date will be included (format: HTML5)
         * @param {string} [exported] Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all)
         * @param {string} [active] Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all)
         * @param {string} [full] Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false)
         * @param {string} [term] Free search term
         * @param {string} [modifiedAfter] Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsGet(user?: string, customer?: string, customers?: string, project?: string, projects?: string, activity?: string, activities?: string, page?: string, size?: string, tags?: string, orderBy?: string, order?: string, begin?: string, end?: string, exported?: string, active?: string, full?: string, term?: string, modifiedAfter?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimesheetCollection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsGet(user, customer, customers, project, projects, activity, activities, page, size, tags, orderBy, order, begin, end, exported, active, full, term, modifiedAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an existing timesheet record
         * @param {number} id Timesheet record ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Duplicates an existing timesheet record
         * @param {number} id Timesheet record ID to duplicate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsIdDuplicatePatch(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsIdDuplicatePatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Switch the export state of a timesheet record to (un-)lock it
         * @param {number} id Timesheet record ID to switch export state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsIdExportPatch(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsIdExportPatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns one timesheet record
         * @param {number} id Timesheet record ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing timesheet.
         * @param {number} id Timesheet record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsIdMetaPatch(id: number, body?: ApiActivitiesIdMetaPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsIdMetaPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing timesheet record, you can pass all or just a subset of the attributes.
         * @summary Update an existing timesheet record
         * @param {number} id Timesheet record ID to update
         * @param {TimesheetEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsIdPatch(id: number, body: TimesheetEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Restarts a previously stopped timesheet record for the current user
         * @param {number} id Timesheet record ID to restart
         * @param {ApiTimesheetsIdRestartPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsIdRestartPatch(id: number, body?: ApiTimesheetsIdRestartPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsIdRestartPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Stops an active timesheet record
         * @param {number} id Timesheet record ID to stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsIdStopPatch(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsIdStopPatch(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new timesheet record for the current user and returns it afterwards.
         * @summary Creates a new timesheet record
         * @param {TimesheetEditForm} body 
         * @param {string} [full] Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsPost(body: TimesheetEditForm, full?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsPost(body, full, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns the collection of recent user activities
         * @param {string} [user] User ID to filter timesheets. Needs permission \&#39;view_other_timesheet\&#39;, pass \&#39;all\&#39; to fetch data for all user (default: current user)
         * @param {string} [begin] Only records after this date will be included. Default: today - 1 year (format: HTML5)
         * @param {string} [size] The amount of entries (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTimesheetsRecentGet(user?: string, begin?: string, size?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimesheetCollectionExpanded>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTimesheetsRecentGet(user, begin, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimesheetApi - factory interface
 * @export
 */
export const TimesheetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimesheetApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the collection of active timesheet records
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsActiveGet(options?: any): AxiosPromise<Array<TimesheetCollectionExpanded>> {
            return localVarFp.apiTimesheetsActiveGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a collection of timesheet records
         * @param {string} [user] User ID to filter timesheets. Needs permission \&#39;view_other_timesheet\&#39;, pass \&#39;all\&#39; to fetch data for all user (default: current user)
         * @param {string} [customer] DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)
         * @param {string} [customers] Comma separated list of customer IDs to filter timesheets
         * @param {string} [project] DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)
         * @param {string} [projects] Comma separated list of project IDs to filter timesheets
         * @param {string} [activity] DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)
         * @param {string} [activities] Comma separated list of activity IDs to filter timesheets
         * @param {string} [page] The page to display, renders a 404 if not found (default: 1)
         * @param {string} [size] The amount of entries for each page (default: 50)
         * @param {string} [tags] Comma separated list of tag names
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: DESC)
         * @param {string} [begin] Only records after this date will be included (format: HTML5)
         * @param {string} [end] Only records before this date will be included (format: HTML5)
         * @param {string} [exported] Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all)
         * @param {string} [active] Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all)
         * @param {string} [full] Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false)
         * @param {string} [term] Free search term
         * @param {string} [modifiedAfter] Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsGet(user?: string, customer?: string, customers?: string, project?: string, projects?: string, activity?: string, activities?: string, page?: string, size?: string, tags?: string, orderBy?: string, order?: string, begin?: string, end?: string, exported?: string, active?: string, full?: string, term?: string, modifiedAfter?: string, options?: any): AxiosPromise<Array<TimesheetCollection>> {
            return localVarFp.apiTimesheetsGet(user, customer, customers, project, projects, activity, activities, page, size, tags, orderBy, order, begin, end, exported, active, full, term, modifiedAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an existing timesheet record
         * @param {number} id Timesheet record ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTimesheetsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Duplicates an existing timesheet record
         * @param {number} id Timesheet record ID to duplicate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdDuplicatePatch(id: number, options?: any): AxiosPromise<TimesheetEntity> {
            return localVarFp.apiTimesheetsIdDuplicatePatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Switch the export state of a timesheet record to (un-)lock it
         * @param {number} id Timesheet record ID to switch export state
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdExportPatch(id: number, options?: any): AxiosPromise<TimesheetEntity> {
            return localVarFp.apiTimesheetsIdExportPatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns one timesheet record
         * @param {number} id Timesheet record ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdGet(id: number, options?: any): AxiosPromise<TimesheetEntity> {
            return localVarFp.apiTimesheetsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing timesheet.
         * @param {number} id Timesheet record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdMetaPatch(id: number, body?: ApiActivitiesIdMetaPatchRequest, options?: any): AxiosPromise<TimesheetEntity> {
            return localVarFp.apiTimesheetsIdMetaPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing timesheet record, you can pass all or just a subset of the attributes.
         * @summary Update an existing timesheet record
         * @param {number} id Timesheet record ID to update
         * @param {TimesheetEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdPatch(id: number, body: TimesheetEditForm, options?: any): AxiosPromise<TimesheetEntity> {
            return localVarFp.apiTimesheetsIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Restarts a previously stopped timesheet record for the current user
         * @param {number} id Timesheet record ID to restart
         * @param {ApiTimesheetsIdRestartPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdRestartPatch(id: number, body?: ApiTimesheetsIdRestartPatchRequest, options?: any): AxiosPromise<TimesheetEntity> {
            return localVarFp.apiTimesheetsIdRestartPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Stops an active timesheet record
         * @param {number} id Timesheet record ID to stop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsIdStopPatch(id: number, options?: any): AxiosPromise<TimesheetEntity> {
            return localVarFp.apiTimesheetsIdStopPatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new timesheet record for the current user and returns it afterwards.
         * @summary Creates a new timesheet record
         * @param {TimesheetEditForm} body 
         * @param {string} [full] Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsPost(body: TimesheetEditForm, full?: string, options?: any): AxiosPromise<TimesheetEntity> {
            return localVarFp.apiTimesheetsPost(body, full, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns the collection of recent user activities
         * @param {string} [user] User ID to filter timesheets. Needs permission \&#39;view_other_timesheet\&#39;, pass \&#39;all\&#39; to fetch data for all user (default: current user)
         * @param {string} [begin] Only records after this date will be included. Default: today - 1 year (format: HTML5)
         * @param {string} [size] The amount of entries (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTimesheetsRecentGet(user?: string, begin?: string, size?: string, options?: any): AxiosPromise<Array<TimesheetCollectionExpanded>> {
            return localVarFp.apiTimesheetsRecentGet(user, begin, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiTimesheetsGet operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsGetRequest
 */
export interface TimesheetApiApiTimesheetsGetRequest {
    /**
     * User ID to filter timesheets. Needs permission \&#39;view_other_timesheet\&#39;, pass \&#39;all\&#39; to fetch data for all user (default: current user)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly user?: string

    /**
     * DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly customer?: string

    /**
     * Comma separated list of customer IDs to filter timesheets
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly customers?: string

    /**
     * DEPRECATED: Project ID to filter timesheets (will be removed with 2.0)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly project?: string

    /**
     * Comma separated list of project IDs to filter timesheets
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly projects?: string

    /**
     * DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly activity?: string

    /**
     * Comma separated list of activity IDs to filter timesheets
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly activities?: string

    /**
     * The page to display, renders a 404 if not found (default: 1)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly page?: string

    /**
     * The amount of entries for each page (default: 50)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly size?: string

    /**
     * Comma separated list of tag names
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly tags?: string

    /**
     * The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly orderBy?: string

    /**
     * The result order. Allowed values: ASC, DESC (default: DESC)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly order?: string

    /**
     * Only records after this date will be included (format: HTML5)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly begin?: string

    /**
     * Only records before this date will be included (format: HTML5)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly end?: string

    /**
     * Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly exported?: string

    /**
     * Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly active?: string

    /**
     * Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly full?: string

    /**
     * Free search term
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly term?: string

    /**
     * Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then.
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsGet
     */
    readonly modifiedAfter?: string
}

/**
 * Request parameters for apiTimesheetsIdDelete operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsIdDeleteRequest
 */
export interface TimesheetApiApiTimesheetsIdDeleteRequest {
    /**
     * Timesheet record ID to delete
     * @type {number}
     * @memberof TimesheetApiApiTimesheetsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiTimesheetsIdDuplicatePatch operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsIdDuplicatePatchRequest
 */
export interface TimesheetApiApiTimesheetsIdDuplicatePatchRequest {
    /**
     * Timesheet record ID to duplicate
     * @type {number}
     * @memberof TimesheetApiApiTimesheetsIdDuplicatePatch
     */
    readonly id: number
}

/**
 * Request parameters for apiTimesheetsIdExportPatch operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsIdExportPatchRequest
 */
export interface TimesheetApiApiTimesheetsIdExportPatchRequest {
    /**
     * Timesheet record ID to switch export state
     * @type {number}
     * @memberof TimesheetApiApiTimesheetsIdExportPatch
     */
    readonly id: number
}

/**
 * Request parameters for apiTimesheetsIdGet operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsIdGetRequest
 */
export interface TimesheetApiApiTimesheetsIdGetRequest {
    /**
     * Timesheet record ID to fetch
     * @type {number}
     * @memberof TimesheetApiApiTimesheetsIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiTimesheetsIdMetaPatch operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsIdMetaPatchRequest
 */
export interface TimesheetApiApiTimesheetsIdMetaPatchRequest {
    /**
     * Timesheet record ID to set the meta-field value for
     * @type {number}
     * @memberof TimesheetApiApiTimesheetsIdMetaPatch
     */
    readonly id: number

    /**
     * 
     * @type {ApiActivitiesIdMetaPatchRequest}
     * @memberof TimesheetApiApiTimesheetsIdMetaPatch
     */
    readonly body?: ApiActivitiesIdMetaPatchRequest
}

/**
 * Request parameters for apiTimesheetsIdPatch operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsIdPatchRequest
 */
export interface TimesheetApiApiTimesheetsIdPatchRequest {
    /**
     * Timesheet record ID to update
     * @type {number}
     * @memberof TimesheetApiApiTimesheetsIdPatch
     */
    readonly id: number

    /**
     * 
     * @type {TimesheetEditForm}
     * @memberof TimesheetApiApiTimesheetsIdPatch
     */
    readonly body: TimesheetEditForm
}

/**
 * Request parameters for apiTimesheetsIdRestartPatch operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsIdRestartPatchRequest
 */
export interface TimesheetApiApiTimesheetsIdRestartPatchRequest {
    /**
     * Timesheet record ID to restart
     * @type {number}
     * @memberof TimesheetApiApiTimesheetsIdRestartPatch
     */
    readonly id: number

    /**
     * 
     * @type {ApiTimesheetsIdRestartPatchRequest}
     * @memberof TimesheetApiApiTimesheetsIdRestartPatch
     */
    readonly body?: ApiTimesheetsIdRestartPatchRequest
}

/**
 * Request parameters for apiTimesheetsIdStopPatch operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsIdStopPatchRequest
 */
export interface TimesheetApiApiTimesheetsIdStopPatchRequest {
    /**
     * Timesheet record ID to stop
     * @type {number}
     * @memberof TimesheetApiApiTimesheetsIdStopPatch
     */
    readonly id: number
}

/**
 * Request parameters for apiTimesheetsPost operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsPostRequest
 */
export interface TimesheetApiApiTimesheetsPostRequest {
    /**
     * 
     * @type {TimesheetEditForm}
     * @memberof TimesheetApiApiTimesheetsPost
     */
    readonly body: TimesheetEditForm

    /**
     * Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsPost
     */
    readonly full?: string
}

/**
 * Request parameters for apiTimesheetsRecentGet operation in TimesheetApi.
 * @export
 * @interface TimesheetApiApiTimesheetsRecentGetRequest
 */
export interface TimesheetApiApiTimesheetsRecentGetRequest {
    /**
     * User ID to filter timesheets. Needs permission \&#39;view_other_timesheet\&#39;, pass \&#39;all\&#39; to fetch data for all user (default: current user)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsRecentGet
     */
    readonly user?: string

    /**
     * Only records after this date will be included. Default: today - 1 year (format: HTML5)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsRecentGet
     */
    readonly begin?: string

    /**
     * The amount of entries (default: 10)
     * @type {string}
     * @memberof TimesheetApiApiTimesheetsRecentGet
     */
    readonly size?: string
}

/**
 * TimesheetApi - object-oriented interface
 * @export
 * @class TimesheetApi
 * @extends {BaseAPI}
 */
export class TimesheetApi extends BaseAPI {
    /**
     * 
     * @summary Returns the collection of active timesheet records
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsActiveGet(options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsActiveGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a collection of timesheet records
     * @param {TimesheetApiApiTimesheetsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsGet(requestParameters: TimesheetApiApiTimesheetsGetRequest = {}, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsGet(requestParameters.user, requestParameters.customer, requestParameters.customers, requestParameters.project, requestParameters.projects, requestParameters.activity, requestParameters.activities, requestParameters.page, requestParameters.size, requestParameters.tags, requestParameters.orderBy, requestParameters.order, requestParameters.begin, requestParameters.end, requestParameters.exported, requestParameters.active, requestParameters.full, requestParameters.term, requestParameters.modifiedAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an existing timesheet record
     * @param {TimesheetApiApiTimesheetsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsIdDelete(requestParameters: TimesheetApiApiTimesheetsIdDeleteRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Duplicates an existing timesheet record
     * @param {TimesheetApiApiTimesheetsIdDuplicatePatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsIdDuplicatePatch(requestParameters: TimesheetApiApiTimesheetsIdDuplicatePatchRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsIdDuplicatePatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Switch the export state of a timesheet record to (un-)lock it
     * @param {TimesheetApiApiTimesheetsIdExportPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsIdExportPatch(requestParameters: TimesheetApiApiTimesheetsIdExportPatchRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsIdExportPatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns one timesheet record
     * @param {TimesheetApiApiTimesheetsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsIdGet(requestParameters: TimesheetApiApiTimesheetsIdGetRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets the value of a meta-field for an existing timesheet.
     * @param {TimesheetApiApiTimesheetsIdMetaPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsIdMetaPatch(requestParameters: TimesheetApiApiTimesheetsIdMetaPatchRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsIdMetaPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing timesheet record, you can pass all or just a subset of the attributes.
     * @summary Update an existing timesheet record
     * @param {TimesheetApiApiTimesheetsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsIdPatch(requestParameters: TimesheetApiApiTimesheetsIdPatchRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Restarts a previously stopped timesheet record for the current user
     * @param {TimesheetApiApiTimesheetsIdRestartPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsIdRestartPatch(requestParameters: TimesheetApiApiTimesheetsIdRestartPatchRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsIdRestartPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Stops an active timesheet record
     * @param {TimesheetApiApiTimesheetsIdStopPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsIdStopPatch(requestParameters: TimesheetApiApiTimesheetsIdStopPatchRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsIdStopPatch(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new timesheet record for the current user and returns it afterwards.
     * @summary Creates a new timesheet record
     * @param {TimesheetApiApiTimesheetsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsPost(requestParameters: TimesheetApiApiTimesheetsPostRequest, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsPost(requestParameters.body, requestParameters.full, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns the collection of recent user activities
     * @param {TimesheetApiApiTimesheetsRecentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimesheetApi
     */
    public apiTimesheetsRecentGet(requestParameters: TimesheetApiApiTimesheetsRecentGetRequest = {}, options?: AxiosRequestConfig) {
        return TimesheetApiFp(this.configuration).apiTimesheetsRecentGet(requestParameters.user, requestParameters.begin, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }
}
