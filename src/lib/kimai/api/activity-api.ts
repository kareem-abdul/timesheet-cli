/* tslint:disable */
/* eslint-disable */
/**
 * Kimai - API Docs
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json) 
 *
 * The version of the OpenAPI document: 0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActivityCollection } from '../models';
// @ts-ignore
import { ActivityEditForm } from '../models';
// @ts-ignore
import { ActivityEntity } from '../models';
// @ts-ignore
import { ActivityRate } from '../models';
// @ts-ignore
import { ActivityRateForm } from '../models';
// @ts-ignore
import { ApiActivitiesIdMetaPatchRequest } from '../models';
/**
 * ActivityApi - axios parameter creator
 * @export
 */
export const ActivityApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a collection of activities
         * @param {string} [project] Project ID to filter activities
         * @param {string} [projects] Comma separated list of project IDs to filter activities
         * @param {string} [visible] Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1)
         * @param {string} [globals] Use if you want to fetch only global activities. Allowed values: true (default: false)
         * @param {string} [globalsFirst] Deprecated parameter, value is not used any more
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name, project (default: name)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesGet: async (project?: string, projects?: string, visible?: string, globals?: string, globalsFirst?: string, orderBy?: string, order?: string, term?: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)

            if (project !== undefined) {
                localVarQueryParameter['project'] = project;
            }

            if (projects !== undefined) {
                localVarQueryParameter['projects'] = projects;
            }

            if (visible !== undefined) {
                localVarQueryParameter['visible'] = visible;
            }

            if (globals !== undefined) {
                localVarQueryParameter['globals'] = globals;
            }

            if (globalsFirst !== undefined) {
                localVarQueryParameter['globalsFirst'] = globalsFirst;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns one activity
         * @param {number} id Activity ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdGet: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiActivitiesIdGet', 'id', id)
            const localVarPath = `/api/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing activity
         * @param {number} id Activity record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdMetaPatch: async (id: number, body?: ApiActivitiesIdMetaPatchRequest, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiActivitiesIdMetaPatch', 'id', id)
            const localVarPath = `/api/activities/{id}/meta`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing activity, you can pass all or just a subset of all attributes
         * @summary Update an existing activity
         * @param {number} id Activity ID to update
         * @param {ActivityEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdPatch: async (id: number, body: ActivityEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiActivitiesIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiActivitiesIdPatch', 'body', body)
            const localVarPath = `/api/activities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a collection of all rates for one activity
         * @param {number} id The activity whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdRatesGet: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiActivitiesIdRatesGet', 'id', id)
            const localVarPath = `/api/activities/{id}/rates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a new rate to an activity
         * @param {number} id The activity to add the rate for
         * @param {ActivityRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdRatesPost: async (id: number, body: ActivityRateForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiActivitiesIdRatesPost', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiActivitiesIdRatesPost', 'body', body)
            const localVarPath = `/api/activities/{id}/rates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes one rate for an activity
         * @param {number} id The activity whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdRatesRateIdDelete: async (id: number, rateId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiActivitiesIdRatesRateIdDelete', 'id', id)
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('apiActivitiesIdRatesRateIdDelete', 'rateId', rateId)
            const localVarPath = `/api/activities/{id}/rates/{rateId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"rateId"}}`, encodeURIComponent(String(rateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new activity and returns it afterwards
         * @summary Creates a new activity
         * @param {ActivityEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesPost: async (body: ActivityEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiActivitiesPost', 'body', body)
            const localVarPath = `/api/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActivityApi - functional programming interface
 * @export
 */
export const ActivityApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActivityApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a collection of activities
         * @param {string} [project] Project ID to filter activities
         * @param {string} [projects] Comma separated list of project IDs to filter activities
         * @param {string} [visible] Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1)
         * @param {string} [globals] Use if you want to fetch only global activities. Allowed values: true (default: false)
         * @param {string} [globalsFirst] Deprecated parameter, value is not used any more
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name, project (default: name)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActivitiesGet(project?: string, projects?: string, visible?: string, globals?: string, globalsFirst?: string, orderBy?: string, order?: string, term?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActivityCollection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActivitiesGet(project, projects, visible, globals, globalsFirst, orderBy, order, term, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns one activity
         * @param {number} id Activity ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActivitiesIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActivitiesIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing activity
         * @param {number} id Activity record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActivitiesIdMetaPatch(id: number, body?: ApiActivitiesIdMetaPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActivitiesIdMetaPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing activity, you can pass all or just a subset of all attributes
         * @summary Update an existing activity
         * @param {number} id Activity ID to update
         * @param {ActivityEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActivitiesIdPatch(id: number, body: ActivityEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActivitiesIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a collection of all rates for one activity
         * @param {number} id The activity whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActivitiesIdRatesGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ActivityRate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActivitiesIdRatesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds a new rate to an activity
         * @param {number} id The activity to add the rate for
         * @param {ActivityRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActivitiesIdRatesPost(id: number, body: ActivityRateForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityRate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActivitiesIdRatesPost(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes one rate for an activity
         * @param {number} id The activity whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActivitiesIdRatesRateIdDelete(id: number, rateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActivitiesIdRatesRateIdDelete(id, rateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new activity and returns it afterwards
         * @summary Creates a new activity
         * @param {ActivityEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiActivitiesPost(body: ActivityEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivityEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiActivitiesPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActivityApi - factory interface
 * @export
 */
export const ActivityApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActivityApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a collection of activities
         * @param {string} [project] Project ID to filter activities
         * @param {string} [projects] Comma separated list of project IDs to filter activities
         * @param {string} [visible] Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1)
         * @param {string} [globals] Use if you want to fetch only global activities. Allowed values: true (default: false)
         * @param {string} [globalsFirst] Deprecated parameter, value is not used any more
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name, project (default: name)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesGet(project?: string, projects?: string, visible?: string, globals?: string, globalsFirst?: string, orderBy?: string, order?: string, term?: string, options?: any): AxiosPromise<Array<ActivityCollection>> {
            return localVarFp.apiActivitiesGet(project, projects, visible, globals, globalsFirst, orderBy, order, term, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns one activity
         * @param {number} id Activity ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdGet(id: number, options?: any): AxiosPromise<ActivityEntity> {
            return localVarFp.apiActivitiesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing activity
         * @param {number} id Activity record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdMetaPatch(id: number, body?: ApiActivitiesIdMetaPatchRequest, options?: any): AxiosPromise<ActivityEntity> {
            return localVarFp.apiActivitiesIdMetaPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing activity, you can pass all or just a subset of all attributes
         * @summary Update an existing activity
         * @param {number} id Activity ID to update
         * @param {ActivityEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdPatch(id: number, body: ActivityEditForm, options?: any): AxiosPromise<ActivityEntity> {
            return localVarFp.apiActivitiesIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a collection of all rates for one activity
         * @param {number} id The activity whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdRatesGet(id: number, options?: any): AxiosPromise<Array<ActivityRate>> {
            return localVarFp.apiActivitiesIdRatesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a new rate to an activity
         * @param {number} id The activity to add the rate for
         * @param {ActivityRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdRatesPost(id: number, body: ActivityRateForm, options?: any): AxiosPromise<ActivityRate> {
            return localVarFp.apiActivitiesIdRatesPost(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes one rate for an activity
         * @param {number} id The activity whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesIdRatesRateIdDelete(id: number, rateId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiActivitiesIdRatesRateIdDelete(id, rateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new activity and returns it afterwards
         * @summary Creates a new activity
         * @param {ActivityEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiActivitiesPost(body: ActivityEditForm, options?: any): AxiosPromise<ActivityEntity> {
            return localVarFp.apiActivitiesPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiActivitiesGet operation in ActivityApi.
 * @export
 * @interface ActivityApiApiActivitiesGetRequest
 */
export interface ActivityApiApiActivitiesGetRequest {
    /**
     * Project ID to filter activities
     * @type {string}
     * @memberof ActivityApiApiActivitiesGet
     */
    readonly project?: string

    /**
     * Comma separated list of project IDs to filter activities
     * @type {string}
     * @memberof ActivityApiApiActivitiesGet
     */
    readonly projects?: string

    /**
     * Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1)
     * @type {string}
     * @memberof ActivityApiApiActivitiesGet
     */
    readonly visible?: string

    /**
     * Use if you want to fetch only global activities. Allowed values: true (default: false)
     * @type {string}
     * @memberof ActivityApiApiActivitiesGet
     */
    readonly globals?: string

    /**
     * Deprecated parameter, value is not used any more
     * @type {string}
     * @memberof ActivityApiApiActivitiesGet
     */
    readonly globalsFirst?: string

    /**
     * The field by which results will be ordered. Allowed values: id, name, project (default: name)
     * @type {string}
     * @memberof ActivityApiApiActivitiesGet
     */
    readonly orderBy?: string

    /**
     * The result order. Allowed values: ASC, DESC (default: ASC)
     * @type {string}
     * @memberof ActivityApiApiActivitiesGet
     */
    readonly order?: string

    /**
     * Free search term
     * @type {string}
     * @memberof ActivityApiApiActivitiesGet
     */
    readonly term?: string
}

/**
 * Request parameters for apiActivitiesIdGet operation in ActivityApi.
 * @export
 * @interface ActivityApiApiActivitiesIdGetRequest
 */
export interface ActivityApiApiActivitiesIdGetRequest {
    /**
     * Activity ID to fetch
     * @type {number}
     * @memberof ActivityApiApiActivitiesIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiActivitiesIdMetaPatch operation in ActivityApi.
 * @export
 * @interface ActivityApiApiActivitiesIdMetaPatchRequest
 */
export interface ActivityApiApiActivitiesIdMetaPatchRequest {
    /**
     * Activity record ID to set the meta-field value for
     * @type {number}
     * @memberof ActivityApiApiActivitiesIdMetaPatch
     */
    readonly id: number

    /**
     * 
     * @type {ApiActivitiesIdMetaPatchRequest}
     * @memberof ActivityApiApiActivitiesIdMetaPatch
     */
    readonly body?: ApiActivitiesIdMetaPatchRequest
}

/**
 * Request parameters for apiActivitiesIdPatch operation in ActivityApi.
 * @export
 * @interface ActivityApiApiActivitiesIdPatchRequest
 */
export interface ActivityApiApiActivitiesIdPatchRequest {
    /**
     * Activity ID to update
     * @type {number}
     * @memberof ActivityApiApiActivitiesIdPatch
     */
    readonly id: number

    /**
     * 
     * @type {ActivityEditForm}
     * @memberof ActivityApiApiActivitiesIdPatch
     */
    readonly body: ActivityEditForm
}

/**
 * Request parameters for apiActivitiesIdRatesGet operation in ActivityApi.
 * @export
 * @interface ActivityApiApiActivitiesIdRatesGetRequest
 */
export interface ActivityApiApiActivitiesIdRatesGetRequest {
    /**
     * The activity whose rates will be returned
     * @type {number}
     * @memberof ActivityApiApiActivitiesIdRatesGet
     */
    readonly id: number
}

/**
 * Request parameters for apiActivitiesIdRatesPost operation in ActivityApi.
 * @export
 * @interface ActivityApiApiActivitiesIdRatesPostRequest
 */
export interface ActivityApiApiActivitiesIdRatesPostRequest {
    /**
     * The activity to add the rate for
     * @type {number}
     * @memberof ActivityApiApiActivitiesIdRatesPost
     */
    readonly id: number

    /**
     * 
     * @type {ActivityRateForm}
     * @memberof ActivityApiApiActivitiesIdRatesPost
     */
    readonly body: ActivityRateForm
}

/**
 * Request parameters for apiActivitiesIdRatesRateIdDelete operation in ActivityApi.
 * @export
 * @interface ActivityApiApiActivitiesIdRatesRateIdDeleteRequest
 */
export interface ActivityApiApiActivitiesIdRatesRateIdDeleteRequest {
    /**
     * The activity whose rate will be removed
     * @type {number}
     * @memberof ActivityApiApiActivitiesIdRatesRateIdDelete
     */
    readonly id: number

    /**
     * The rate to remove
     * @type {number}
     * @memberof ActivityApiApiActivitiesIdRatesRateIdDelete
     */
    readonly rateId: number
}

/**
 * Request parameters for apiActivitiesPost operation in ActivityApi.
 * @export
 * @interface ActivityApiApiActivitiesPostRequest
 */
export interface ActivityApiApiActivitiesPostRequest {
    /**
     * 
     * @type {ActivityEditForm}
     * @memberof ActivityApiApiActivitiesPost
     */
    readonly body: ActivityEditForm
}

/**
 * ActivityApi - object-oriented interface
 * @export
 * @class ActivityApi
 * @extends {BaseAPI}
 */
export class ActivityApi extends BaseAPI {
    /**
     * 
     * @summary Returns a collection of activities
     * @param {ActivityApiApiActivitiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public apiActivitiesGet(requestParameters: ActivityApiApiActivitiesGetRequest = {}, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).apiActivitiesGet(requestParameters.project, requestParameters.projects, requestParameters.visible, requestParameters.globals, requestParameters.globalsFirst, requestParameters.orderBy, requestParameters.order, requestParameters.term, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns one activity
     * @param {ActivityApiApiActivitiesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public apiActivitiesIdGet(requestParameters: ActivityApiApiActivitiesIdGetRequest, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).apiActivitiesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets the value of a meta-field for an existing activity
     * @param {ActivityApiApiActivitiesIdMetaPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public apiActivitiesIdMetaPatch(requestParameters: ActivityApiApiActivitiesIdMetaPatchRequest, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).apiActivitiesIdMetaPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing activity, you can pass all or just a subset of all attributes
     * @summary Update an existing activity
     * @param {ActivityApiApiActivitiesIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public apiActivitiesIdPatch(requestParameters: ActivityApiApiActivitiesIdPatchRequest, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).apiActivitiesIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a collection of all rates for one activity
     * @param {ActivityApiApiActivitiesIdRatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public apiActivitiesIdRatesGet(requestParameters: ActivityApiApiActivitiesIdRatesGetRequest, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).apiActivitiesIdRatesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a new rate to an activity
     * @param {ActivityApiApiActivitiesIdRatesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public apiActivitiesIdRatesPost(requestParameters: ActivityApiApiActivitiesIdRatesPostRequest, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).apiActivitiesIdRatesPost(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes one rate for an activity
     * @param {ActivityApiApiActivitiesIdRatesRateIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public apiActivitiesIdRatesRateIdDelete(requestParameters: ActivityApiApiActivitiesIdRatesRateIdDeleteRequest, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).apiActivitiesIdRatesRateIdDelete(requestParameters.id, requestParameters.rateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new activity and returns it afterwards
     * @summary Creates a new activity
     * @param {ActivityApiApiActivitiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActivityApi
     */
    public apiActivitiesPost(requestParameters: ActivityApiApiActivitiesPostRequest, options?: AxiosRequestConfig) {
        return ActivityApiFp(this.configuration).apiActivitiesPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
