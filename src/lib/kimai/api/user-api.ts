/* tslint:disable */
/* eslint-disable */
/**
 * Kimai - API Docs
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json) 
 *
 * The version of the OpenAPI document: 0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UserCollection } from '../models';
// @ts-ignore
import { UserCreateForm } from '../models';
// @ts-ignore
import { UserEditForm } from '../models';
// @ts-ignore
import { UserEntity } from '../models';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns the collection of all registered users
         * @param {string} [visible] Visibility status to filter users. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet: async (visible?: string, orderBy?: string, order?: string, term?: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)

            if (visible !== undefined) {
                localVarQueryParameter['visible'] = visible;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return one user entity
         * @param {number} id User ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdGet', 'id', id)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)
         * @summary Update an existing user
         * @param {number} id User ID to update
         * @param {UserEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdPatch: async (id: number, body: UserEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiUsersIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiUsersIdPatch', 'body', body)
            const localVarPath = `/api/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return the current user entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeGet: async (options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user and returns it afterwards
         * @summary Creates a new user
         * @param {UserCreateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost: async (body: UserCreateForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiUsersPost', 'body', body)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns the collection of all registered users
         * @param {string} [visible] Visibility status to filter users. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGet(visible?: string, orderBy?: string, order?: string, term?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserCollection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGet(visible, orderBy, order, term, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return one user entity
         * @param {number} id User ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)
         * @summary Update an existing user
         * @param {number} id User ID to update
         * @param {UserEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersIdPatch(id: number, body: UserEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Return the current user entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new user and returns it afterwards
         * @summary Creates a new user
         * @param {UserCreateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPost(body: UserCreateForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns the collection of all registered users
         * @param {string} [visible] Visibility status to filter users. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(visible?: string, orderBy?: string, order?: string, term?: string, options?: any): AxiosPromise<Array<UserCollection>> {
            return localVarFp.apiUsersGet(visible, orderBy, order, term, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return one user entity
         * @param {number} id User ID to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdGet(id: number, options?: any): AxiosPromise<UserEntity> {
            return localVarFp.apiUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)
         * @summary Update an existing user
         * @param {number} id User ID to update
         * @param {UserEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersIdPatch(id: number, body: UserEditForm, options?: any): AxiosPromise<UserEntity> {
            return localVarFp.apiUsersIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return the current user entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeGet(options?: any): AxiosPromise<UserEntity> {
            return localVarFp.apiUsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new user and returns it afterwards
         * @summary Creates a new user
         * @param {UserCreateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(body: UserCreateForm, options?: any): AxiosPromise<UserEntity> {
            return localVarFp.apiUsersPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiUsersGet operation in UserApi.
 * @export
 * @interface UserApiApiUsersGetRequest
 */
export interface UserApiApiUsersGetRequest {
    /**
     * Visibility status to filter users. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1)
     * @type {string}
     * @memberof UserApiApiUsersGet
     */
    readonly visible?: string

    /**
     * The field by which results will be ordered. Allowed values: id, username, alias, email (default: username)
     * @type {string}
     * @memberof UserApiApiUsersGet
     */
    readonly orderBy?: string

    /**
     * The result order. Allowed values: ASC, DESC (default: ASC)
     * @type {string}
     * @memberof UserApiApiUsersGet
     */
    readonly order?: string

    /**
     * Free search term
     * @type {string}
     * @memberof UserApiApiUsersGet
     */
    readonly term?: string
}

/**
 * Request parameters for apiUsersIdGet operation in UserApi.
 * @export
 * @interface UserApiApiUsersIdGetRequest
 */
export interface UserApiApiUsersIdGetRequest {
    /**
     * User ID to fetch
     * @type {number}
     * @memberof UserApiApiUsersIdGet
     */
    readonly id: number
}

/**
 * Request parameters for apiUsersIdPatch operation in UserApi.
 * @export
 * @interface UserApiApiUsersIdPatchRequest
 */
export interface UserApiApiUsersIdPatchRequest {
    /**
     * User ID to update
     * @type {number}
     * @memberof UserApiApiUsersIdPatch
     */
    readonly id: number

    /**
     * 
     * @type {UserEditForm}
     * @memberof UserApiApiUsersIdPatch
     */
    readonly body: UserEditForm
}

/**
 * Request parameters for apiUsersPost operation in UserApi.
 * @export
 * @interface UserApiApiUsersPostRequest
 */
export interface UserApiApiUsersPostRequest {
    /**
     * 
     * @type {UserCreateForm}
     * @memberof UserApiApiUsersPost
     */
    readonly body: UserCreateForm
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Returns the collection of all registered users
     * @param {UserApiApiUsersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersGet(requestParameters: UserApiApiUsersGetRequest = {}, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersGet(requestParameters.visible, requestParameters.orderBy, requestParameters.order, requestParameters.term, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return one user entity
     * @param {UserApiApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersIdGet(requestParameters: UserApiApiUsersIdGetRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing user, you can pass all or just a subset of all attributes (passing roles will replace all existing ones)
     * @summary Update an existing user
     * @param {UserApiApiUsersIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersIdPatch(requestParameters: UserApiApiUsersIdPatchRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return the current user entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersMeGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new user and returns it afterwards
     * @summary Creates a new user
     * @param {UserApiApiUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiUsersPost(requestParameters: UserApiApiUsersPostRequest, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).apiUsersPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
