/* tslint:disable */
/* eslint-disable */
/**
 * Kimai - API Docs
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json) 
 *
 * The version of the OpenAPI document: 0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Team } from '../models';
// @ts-ignore
import { TeamCollection } from '../models';
// @ts-ignore
import { TeamEditForm } from '../models';
/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch all existing teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsGet: async (options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revokes access for an activity from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} activityId The activity to remove (Activity ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdActivitiesActivityIdDelete: async (id: number, activityId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdActivitiesActivityIdDelete', 'id', id)
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('apiTeamsIdActivitiesActivityIdDelete', 'activityId', activityId)
            const localVarPath = `/api/teams/{id}/activities/{activityId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Grant the team access to an activity
         * @param {number} id The team that is granted access
         * @param {number} activityId The activity to grant acecess to (Activity ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdActivitiesActivityIdPost: async (id: number, activityId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdActivitiesActivityIdPost', 'id', id)
            // verify required parameter 'activityId' is not null or undefined
            assertParamExists('apiTeamsIdActivitiesActivityIdPost', 'activityId', activityId)
            const localVarPath = `/api/teams/{id}/activities/{activityId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"activityId"}}`, encodeURIComponent(String(activityId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revokes access for a customer from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} customerId The customer to remove (Customer ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdCustomersCustomerIdDelete: async (id: number, customerId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdCustomersCustomerIdDelete', 'id', id)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiTeamsIdCustomersCustomerIdDelete', 'customerId', customerId)
            const localVarPath = `/api/teams/{id}/customers/{customerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Grant the team access to a customer
         * @param {number} id The team that is granted access
         * @param {number} customerId The customer to grant acecess to (Customer ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdCustomersCustomerIdPost: async (id: number, customerId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdCustomersCustomerIdPost', 'id', id)
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('apiTeamsIdCustomersCustomerIdPost', 'customerId', customerId)
            const localVarPath = `/api/teams/{id}/customers/{customerId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a team
         * @param {number} id Team ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdDelete: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdDelete', 'id', id)
            const localVarPath = `/api/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns one team
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdGet: async (id: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdGet', 'id', id)
            const localVarPath = `/api/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes a member from the team
         * @param {number} id The team from which the member will be removed
         * @param {number} userId The team member to remove (User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdMembersUserIdDelete: async (id: number, userId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdMembersUserIdDelete', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiTeamsIdMembersUserIdDelete', 'userId', userId)
            const localVarPath = `/api/teams/{id}/members/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new member to a team
         * @param {number} id The team which will receive the new member
         * @param {number} userId The team member to add (User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdMembersUserIdPost: async (id: number, userId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdMembersUserIdPost', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiTeamsIdMembersUserIdPost', 'userId', userId)
            const localVarPath = `/api/teams/{id}/members/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing team, you can pass all or just a subset of all attributes (passing users will replace all existing ones)
         * @summary Update an existing team
         * @param {number} id Team ID to update
         * @param {TeamEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdPatch: async (id: number, body: TeamEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiTeamsIdPatch', 'body', body)
            const localVarPath = `/api/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revokes access for a project from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} projectId The project to remove (Project ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdProjectsProjectIdDelete: async (id: number, projectId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdProjectsProjectIdDelete', 'id', id)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiTeamsIdProjectsProjectIdDelete', 'projectId', projectId)
            const localVarPath = `/api/teams/{id}/projects/{projectId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Grant the team access to a project
         * @param {number} id The team that is granted access
         * @param {number} projectId The project to grant acecess to (Project ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdProjectsProjectIdPost: async (id: number, projectId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTeamsIdProjectsProjectIdPost', 'id', id)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('apiTeamsIdProjectsProjectIdPost', 'projectId', projectId)
            const localVarPath = `/api/teams/{id}/projects/{projectId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new team and returns it afterwards
         * @summary Creates a new team
         * @param {TeamEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsPost: async (body: TeamEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiTeamsPost', 'body', body)
            const localVarPath = `/api/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TeamApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch all existing teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TeamCollection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revokes access for an activity from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} activityId The activity to remove (Activity ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdActivitiesActivityIdDelete(id: number, activityId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdActivitiesActivityIdDelete(id, activityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Grant the team access to an activity
         * @param {number} id The team that is granted access
         * @param {number} activityId The activity to grant acecess to (Activity ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdActivitiesActivityIdPost(id: number, activityId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdActivitiesActivityIdPost(id, activityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revokes access for a customer from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} customerId The customer to remove (Customer ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdCustomersCustomerIdDelete(id: number, customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdCustomersCustomerIdDelete(id, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Grant the team access to a customer
         * @param {number} id The team that is granted access
         * @param {number} customerId The customer to grant acecess to (Customer ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdCustomersCustomerIdPost(id: number, customerId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdCustomersCustomerIdPost(id, customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a team
         * @param {number} id Team ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns one team
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Removes a member from the team
         * @param {number} id The team from which the member will be removed
         * @param {number} userId The team member to remove (User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdMembersUserIdDelete(id: number, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdMembersUserIdDelete(id, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add a new member to a team
         * @param {number} id The team which will receive the new member
         * @param {number} userId The team member to add (User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdMembersUserIdPost(id: number, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdMembersUserIdPost(id, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing team, you can pass all or just a subset of all attributes (passing users will replace all existing ones)
         * @summary Update an existing team
         * @param {number} id Team ID to update
         * @param {TeamEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdPatch(id: number, body: TeamEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revokes access for a project from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} projectId The project to remove (Project ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdProjectsProjectIdDelete(id: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdProjectsProjectIdDelete(id, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Grant the team access to a project
         * @param {number} id The team that is granted access
         * @param {number} projectId The project to grant acecess to (Project ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsIdProjectsProjectIdPost(id: number, projectId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsIdProjectsProjectIdPost(id, projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new team and returns it afterwards
         * @summary Creates a new team
         * @param {TeamEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTeamsPost(body: TeamEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTeamsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TeamApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch all existing teams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsGet(options?: any): AxiosPromise<Array<TeamCollection>> {
            return localVarFp.apiTeamsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revokes access for an activity from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} activityId The activity to remove (Activity ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdActivitiesActivityIdDelete(id: number, activityId: number, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdActivitiesActivityIdDelete(id, activityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Grant the team access to an activity
         * @param {number} id The team that is granted access
         * @param {number} activityId The activity to grant acecess to (Activity ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdActivitiesActivityIdPost(id: number, activityId: number, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdActivitiesActivityIdPost(id, activityId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revokes access for a customer from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} customerId The customer to remove (Customer ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdCustomersCustomerIdDelete(id: number, customerId: number, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdCustomersCustomerIdDelete(id, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Grant the team access to a customer
         * @param {number} id The team that is granted access
         * @param {number} customerId The customer to grant acecess to (Customer ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdCustomersCustomerIdPost(id: number, customerId: number, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdCustomersCustomerIdPost(id, customerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a team
         * @param {number} id Team ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTeamsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns one team
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdGet(id: string, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Removes a member from the team
         * @param {number} id The team from which the member will be removed
         * @param {number} userId The team member to remove (User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdMembersUserIdDelete(id: number, userId: number, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdMembersUserIdDelete(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new member to a team
         * @param {number} id The team which will receive the new member
         * @param {number} userId The team member to add (User ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdMembersUserIdPost(id: number, userId: number, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdMembersUserIdPost(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing team, you can pass all or just a subset of all attributes (passing users will replace all existing ones)
         * @summary Update an existing team
         * @param {number} id Team ID to update
         * @param {TeamEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdPatch(id: number, body: TeamEditForm, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revokes access for a project from a team
         * @param {number} id The team whose permission will be revoked
         * @param {number} projectId The project to remove (Project ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdProjectsProjectIdDelete(id: number, projectId: number, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdProjectsProjectIdDelete(id, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Grant the team access to a project
         * @param {number} id The team that is granted access
         * @param {number} projectId The project to grant acecess to (Project ID)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsIdProjectsProjectIdPost(id: number, projectId: number, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsIdProjectsProjectIdPost(id, projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new team and returns it afterwards
         * @summary Creates a new team
         * @param {TeamEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTeamsPost(body: TeamEditForm, options?: any): AxiosPromise<Team> {
            return localVarFp.apiTeamsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiTeamsIdActivitiesActivityIdDelete operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdActivitiesActivityIdDeleteRequest
 */
export interface TeamApiApiTeamsIdActivitiesActivityIdDeleteRequest {
    /**
     * The team whose permission will be revoked
     * @type {number}
     * @memberof TeamApiApiTeamsIdActivitiesActivityIdDelete
     */
    readonly id: number

    /**
     * The activity to remove (Activity ID)
     * @type {number}
     * @memberof TeamApiApiTeamsIdActivitiesActivityIdDelete
     */
    readonly activityId: number
}

/**
 * Request parameters for apiTeamsIdActivitiesActivityIdPost operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdActivitiesActivityIdPostRequest
 */
export interface TeamApiApiTeamsIdActivitiesActivityIdPostRequest {
    /**
     * The team that is granted access
     * @type {number}
     * @memberof TeamApiApiTeamsIdActivitiesActivityIdPost
     */
    readonly id: number

    /**
     * The activity to grant acecess to (Activity ID)
     * @type {number}
     * @memberof TeamApiApiTeamsIdActivitiesActivityIdPost
     */
    readonly activityId: number
}

/**
 * Request parameters for apiTeamsIdCustomersCustomerIdDelete operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdCustomersCustomerIdDeleteRequest
 */
export interface TeamApiApiTeamsIdCustomersCustomerIdDeleteRequest {
    /**
     * The team whose permission will be revoked
     * @type {number}
     * @memberof TeamApiApiTeamsIdCustomersCustomerIdDelete
     */
    readonly id: number

    /**
     * The customer to remove (Customer ID)
     * @type {number}
     * @memberof TeamApiApiTeamsIdCustomersCustomerIdDelete
     */
    readonly customerId: number
}

/**
 * Request parameters for apiTeamsIdCustomersCustomerIdPost operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdCustomersCustomerIdPostRequest
 */
export interface TeamApiApiTeamsIdCustomersCustomerIdPostRequest {
    /**
     * The team that is granted access
     * @type {number}
     * @memberof TeamApiApiTeamsIdCustomersCustomerIdPost
     */
    readonly id: number

    /**
     * The customer to grant acecess to (Customer ID)
     * @type {number}
     * @memberof TeamApiApiTeamsIdCustomersCustomerIdPost
     */
    readonly customerId: number
}

/**
 * Request parameters for apiTeamsIdDelete operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdDeleteRequest
 */
export interface TeamApiApiTeamsIdDeleteRequest {
    /**
     * Team ID to delete
     * @type {number}
     * @memberof TeamApiApiTeamsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiTeamsIdGet operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdGetRequest
 */
export interface TeamApiApiTeamsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TeamApiApiTeamsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiTeamsIdMembersUserIdDelete operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdMembersUserIdDeleteRequest
 */
export interface TeamApiApiTeamsIdMembersUserIdDeleteRequest {
    /**
     * The team from which the member will be removed
     * @type {number}
     * @memberof TeamApiApiTeamsIdMembersUserIdDelete
     */
    readonly id: number

    /**
     * The team member to remove (User ID)
     * @type {number}
     * @memberof TeamApiApiTeamsIdMembersUserIdDelete
     */
    readonly userId: number
}

/**
 * Request parameters for apiTeamsIdMembersUserIdPost operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdMembersUserIdPostRequest
 */
export interface TeamApiApiTeamsIdMembersUserIdPostRequest {
    /**
     * The team which will receive the new member
     * @type {number}
     * @memberof TeamApiApiTeamsIdMembersUserIdPost
     */
    readonly id: number

    /**
     * The team member to add (User ID)
     * @type {number}
     * @memberof TeamApiApiTeamsIdMembersUserIdPost
     */
    readonly userId: number
}

/**
 * Request parameters for apiTeamsIdPatch operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdPatchRequest
 */
export interface TeamApiApiTeamsIdPatchRequest {
    /**
     * Team ID to update
     * @type {number}
     * @memberof TeamApiApiTeamsIdPatch
     */
    readonly id: number

    /**
     * 
     * @type {TeamEditForm}
     * @memberof TeamApiApiTeamsIdPatch
     */
    readonly body: TeamEditForm
}

/**
 * Request parameters for apiTeamsIdProjectsProjectIdDelete operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdProjectsProjectIdDeleteRequest
 */
export interface TeamApiApiTeamsIdProjectsProjectIdDeleteRequest {
    /**
     * The team whose permission will be revoked
     * @type {number}
     * @memberof TeamApiApiTeamsIdProjectsProjectIdDelete
     */
    readonly id: number

    /**
     * The project to remove (Project ID)
     * @type {number}
     * @memberof TeamApiApiTeamsIdProjectsProjectIdDelete
     */
    readonly projectId: number
}

/**
 * Request parameters for apiTeamsIdProjectsProjectIdPost operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsIdProjectsProjectIdPostRequest
 */
export interface TeamApiApiTeamsIdProjectsProjectIdPostRequest {
    /**
     * The team that is granted access
     * @type {number}
     * @memberof TeamApiApiTeamsIdProjectsProjectIdPost
     */
    readonly id: number

    /**
     * The project to grant acecess to (Project ID)
     * @type {number}
     * @memberof TeamApiApiTeamsIdProjectsProjectIdPost
     */
    readonly projectId: number
}

/**
 * Request parameters for apiTeamsPost operation in TeamApi.
 * @export
 * @interface TeamApiApiTeamsPostRequest
 */
export interface TeamApiApiTeamsPostRequest {
    /**
     * 
     * @type {TeamEditForm}
     * @memberof TeamApiApiTeamsPost
     */
    readonly body: TeamEditForm
}

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
    /**
     * 
     * @summary Fetch all existing teams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsGet(options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revokes access for an activity from a team
     * @param {TeamApiApiTeamsIdActivitiesActivityIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdActivitiesActivityIdDelete(requestParameters: TeamApiApiTeamsIdActivitiesActivityIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdActivitiesActivityIdDelete(requestParameters.id, requestParameters.activityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Grant the team access to an activity
     * @param {TeamApiApiTeamsIdActivitiesActivityIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdActivitiesActivityIdPost(requestParameters: TeamApiApiTeamsIdActivitiesActivityIdPostRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdActivitiesActivityIdPost(requestParameters.id, requestParameters.activityId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revokes access for a customer from a team
     * @param {TeamApiApiTeamsIdCustomersCustomerIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdCustomersCustomerIdDelete(requestParameters: TeamApiApiTeamsIdCustomersCustomerIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdCustomersCustomerIdDelete(requestParameters.id, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Grant the team access to a customer
     * @param {TeamApiApiTeamsIdCustomersCustomerIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdCustomersCustomerIdPost(requestParameters: TeamApiApiTeamsIdCustomersCustomerIdPostRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdCustomersCustomerIdPost(requestParameters.id, requestParameters.customerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a team
     * @param {TeamApiApiTeamsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdDelete(requestParameters: TeamApiApiTeamsIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns one team
     * @param {TeamApiApiTeamsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdGet(requestParameters: TeamApiApiTeamsIdGetRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Removes a member from the team
     * @param {TeamApiApiTeamsIdMembersUserIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdMembersUserIdDelete(requestParameters: TeamApiApiTeamsIdMembersUserIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdMembersUserIdDelete(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new member to a team
     * @param {TeamApiApiTeamsIdMembersUserIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdMembersUserIdPost(requestParameters: TeamApiApiTeamsIdMembersUserIdPostRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdMembersUserIdPost(requestParameters.id, requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing team, you can pass all or just a subset of all attributes (passing users will replace all existing ones)
     * @summary Update an existing team
     * @param {TeamApiApiTeamsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdPatch(requestParameters: TeamApiApiTeamsIdPatchRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revokes access for a project from a team
     * @param {TeamApiApiTeamsIdProjectsProjectIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdProjectsProjectIdDelete(requestParameters: TeamApiApiTeamsIdProjectsProjectIdDeleteRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdProjectsProjectIdDelete(requestParameters.id, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Grant the team access to a project
     * @param {TeamApiApiTeamsIdProjectsProjectIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsIdProjectsProjectIdPost(requestParameters: TeamApiApiTeamsIdProjectsProjectIdPostRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsIdProjectsProjectIdPost(requestParameters.id, requestParameters.projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new team and returns it afterwards
     * @summary Creates a new team
     * @param {TeamApiApiTeamsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamApi
     */
    public apiTeamsPost(requestParameters: TeamApiApiTeamsPostRequest, options?: AxiosRequestConfig) {
        return TeamApiFp(this.configuration).apiTeamsPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
