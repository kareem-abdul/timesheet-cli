/* tslint:disable */
/* eslint-disable */
/**
 * Kimai - API Docs
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json) 
 *
 * The version of the OpenAPI document: 0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiActivitiesIdMetaPatchRequest } from '../models';
// @ts-ignore
import { ProjectCollection } from '../models';
// @ts-ignore
import { ProjectEditForm } from '../models';
// @ts-ignore
import { ProjectEntity } from '../models';
// @ts-ignore
import { ProjectRate } from '../models';
// @ts-ignore
import { ProjectRateForm } from '../models';
/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a collection of projects.
         * @param {string} [customer] Customer ID to filter projects
         * @param {string} [customers] Comma separated list of customer IDs to filter projects
         * @param {string} [visible] Visibility status to filter projects. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both (default: 1)
         * @param {string} [start] Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)
         * @param {string} [end] Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)
         * @param {string} [ignoreDates] If set, start and end are completely ignored. Allowed values: 1 (default: off)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name, customer (default: name)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGet: async (customer?: string, customers?: string, visible?: string, start?: string, end?: string, ignoreDates?: string, order?: string, orderBy?: string, term?: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)

            if (customer !== undefined) {
                localVarQueryParameter['customer'] = customer;
            }

            if (customers !== undefined) {
                localVarQueryParameter['customers'] = customers;
            }

            if (visible !== undefined) {
                localVarQueryParameter['visible'] = visible;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (ignoreDates !== undefined) {
                localVarQueryParameter['ignoreDates'] = ignoreDates;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns one project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdGet: async (id: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProjectsIdGet', 'id', id)
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing project
         * @param {number} id Project record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdMetaPatch: async (id: number, body?: ApiActivitiesIdMetaPatchRequest, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProjectsIdMetaPatch', 'id', id)
            const localVarPath = `/api/projects/{id}/meta`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing project, you can pass all or just a subset of all attributes
         * @summary Update an existing project
         * @param {number} id Project ID to update
         * @param {ProjectEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdPatch: async (id: number, body: ProjectEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProjectsIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiProjectsIdPatch', 'body', body)
            const localVarPath = `/api/projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a collection of all rates for one project
         * @param {number} id The project whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdRatesGet: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProjectsIdRatesGet', 'id', id)
            const localVarPath = `/api/projects/{id}/rates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a new rate to an project
         * @param {number} id The project to add the rate for
         * @param {ProjectRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdRatesPost: async (id: number, body: ProjectRateForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProjectsIdRatesPost', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiProjectsIdRatesPost', 'body', body)
            const localVarPath = `/api/projects/{id}/rates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes one rate for an project
         * @param {number} id The project whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdRatesRateIdDelete: async (id: number, rateId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiProjectsIdRatesRateIdDelete', 'id', id)
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('apiProjectsIdRatesRateIdDelete', 'rateId', rateId)
            const localVarPath = `/api/projects/{id}/rates/{rateId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"rateId"}}`, encodeURIComponent(String(rateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new project and returns it afterwards
         * @summary Creates a new project
         * @param {ProjectEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsPost: async (body: ProjectEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiProjectsPost', 'body', body)
            const localVarPath = `/api/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a collection of projects.
         * @param {string} [customer] Customer ID to filter projects
         * @param {string} [customers] Comma separated list of customer IDs to filter projects
         * @param {string} [visible] Visibility status to filter projects. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both (default: 1)
         * @param {string} [start] Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)
         * @param {string} [end] Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)
         * @param {string} [ignoreDates] If set, start and end are completely ignored. Allowed values: 1 (default: off)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name, customer (default: name)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsGet(customer?: string, customers?: string, visible?: string, start?: string, end?: string, ignoreDates?: string, order?: string, orderBy?: string, term?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectCollection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsGet(customer, customers, visible, start, end, ignoreDates, order, orderBy, term, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns one project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing project
         * @param {number} id Project record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsIdMetaPatch(id: number, body?: ApiActivitiesIdMetaPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsIdMetaPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing project, you can pass all or just a subset of all attributes
         * @summary Update an existing project
         * @param {number} id Project ID to update
         * @param {ProjectEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsIdPatch(id: number, body: ProjectEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a collection of all rates for one project
         * @param {number} id The project whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsIdRatesGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectRate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsIdRatesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds a new rate to an project
         * @param {number} id The project to add the rate for
         * @param {ProjectRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsIdRatesPost(id: number, body: ProjectRateForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsIdRatesPost(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes one rate for an project
         * @param {number} id The project whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsIdRatesRateIdDelete(id: number, rateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsIdRatesRateIdDelete(id, rateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new project and returns it afterwards
         * @summary Creates a new project
         * @param {ProjectEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiProjectsPost(body: ProjectEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiProjectsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a collection of projects.
         * @param {string} [customer] Customer ID to filter projects
         * @param {string} [customers] Comma separated list of customer IDs to filter projects
         * @param {string} [visible] Visibility status to filter projects. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both (default: 1)
         * @param {string} [start] Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)
         * @param {string} [end] Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)
         * @param {string} [ignoreDates] If set, start and end are completely ignored. Allowed values: 1 (default: off)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name, customer (default: name)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsGet(customer?: string, customers?: string, visible?: string, start?: string, end?: string, ignoreDates?: string, order?: string, orderBy?: string, term?: string, options?: any): AxiosPromise<Array<ProjectCollection>> {
            return localVarFp.apiProjectsGet(customer, customers, visible, start, end, ignoreDates, order, orderBy, term, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns one project
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdGet(id: string, options?: any): AxiosPromise<ProjectEntity> {
            return localVarFp.apiProjectsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing project
         * @param {number} id Project record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdMetaPatch(id: number, body?: ApiActivitiesIdMetaPatchRequest, options?: any): AxiosPromise<ProjectEntity> {
            return localVarFp.apiProjectsIdMetaPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing project, you can pass all or just a subset of all attributes
         * @summary Update an existing project
         * @param {number} id Project ID to update
         * @param {ProjectEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdPatch(id: number, body: ProjectEditForm, options?: any): AxiosPromise<ProjectEntity> {
            return localVarFp.apiProjectsIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a collection of all rates for one project
         * @param {number} id The project whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdRatesGet(id: number, options?: any): AxiosPromise<Array<ProjectRate>> {
            return localVarFp.apiProjectsIdRatesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a new rate to an project
         * @param {number} id The project to add the rate for
         * @param {ProjectRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdRatesPost(id: number, body: ProjectRateForm, options?: any): AxiosPromise<ProjectRate> {
            return localVarFp.apiProjectsIdRatesPost(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes one rate for an project
         * @param {number} id The project whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsIdRatesRateIdDelete(id: number, rateId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiProjectsIdRatesRateIdDelete(id, rateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new project and returns it afterwards
         * @summary Creates a new project
         * @param {ProjectEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiProjectsPost(body: ProjectEditForm, options?: any): AxiosPromise<ProjectEntity> {
            return localVarFp.apiProjectsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiProjectsGet operation in ProjectApi.
 * @export
 * @interface ProjectApiApiProjectsGetRequest
 */
export interface ProjectApiApiProjectsGetRequest {
    /**
     * Customer ID to filter projects
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly customer?: string

    /**
     * Comma separated list of customer IDs to filter projects
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly customers?: string

    /**
     * Visibility status to filter projects. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both (default: 1)
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly visible?: string

    /**
     * Only projects that started before this date will be included. Allowed format: HTML5 (default: now, if end is also empty)
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly start?: string

    /**
     * Only projects that ended after this date will be included. Allowed format: HTML5 (default: now, if start is also empty)
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly end?: string

    /**
     * If set, start and end are completely ignored. Allowed values: 1 (default: off)
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly ignoreDates?: string

    /**
     * The result order. Allowed values: ASC, DESC (default: ASC)
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly order?: string

    /**
     * The field by which results will be ordered. Allowed values: id, name, customer (default: name)
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly orderBy?: string

    /**
     * Free search term
     * @type {string}
     * @memberof ProjectApiApiProjectsGet
     */
    readonly term?: string
}

/**
 * Request parameters for apiProjectsIdGet operation in ProjectApi.
 * @export
 * @interface ProjectApiApiProjectsIdGetRequest
 */
export interface ProjectApiApiProjectsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ProjectApiApiProjectsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiProjectsIdMetaPatch operation in ProjectApi.
 * @export
 * @interface ProjectApiApiProjectsIdMetaPatchRequest
 */
export interface ProjectApiApiProjectsIdMetaPatchRequest {
    /**
     * Project record ID to set the meta-field value for
     * @type {number}
     * @memberof ProjectApiApiProjectsIdMetaPatch
     */
    readonly id: number

    /**
     * 
     * @type {ApiActivitiesIdMetaPatchRequest}
     * @memberof ProjectApiApiProjectsIdMetaPatch
     */
    readonly body?: ApiActivitiesIdMetaPatchRequest
}

/**
 * Request parameters for apiProjectsIdPatch operation in ProjectApi.
 * @export
 * @interface ProjectApiApiProjectsIdPatchRequest
 */
export interface ProjectApiApiProjectsIdPatchRequest {
    /**
     * Project ID to update
     * @type {number}
     * @memberof ProjectApiApiProjectsIdPatch
     */
    readonly id: number

    /**
     * 
     * @type {ProjectEditForm}
     * @memberof ProjectApiApiProjectsIdPatch
     */
    readonly body: ProjectEditForm
}

/**
 * Request parameters for apiProjectsIdRatesGet operation in ProjectApi.
 * @export
 * @interface ProjectApiApiProjectsIdRatesGetRequest
 */
export interface ProjectApiApiProjectsIdRatesGetRequest {
    /**
     * The project whose rates will be returned
     * @type {number}
     * @memberof ProjectApiApiProjectsIdRatesGet
     */
    readonly id: number
}

/**
 * Request parameters for apiProjectsIdRatesPost operation in ProjectApi.
 * @export
 * @interface ProjectApiApiProjectsIdRatesPostRequest
 */
export interface ProjectApiApiProjectsIdRatesPostRequest {
    /**
     * The project to add the rate for
     * @type {number}
     * @memberof ProjectApiApiProjectsIdRatesPost
     */
    readonly id: number

    /**
     * 
     * @type {ProjectRateForm}
     * @memberof ProjectApiApiProjectsIdRatesPost
     */
    readonly body: ProjectRateForm
}

/**
 * Request parameters for apiProjectsIdRatesRateIdDelete operation in ProjectApi.
 * @export
 * @interface ProjectApiApiProjectsIdRatesRateIdDeleteRequest
 */
export interface ProjectApiApiProjectsIdRatesRateIdDeleteRequest {
    /**
     * The project whose rate will be removed
     * @type {number}
     * @memberof ProjectApiApiProjectsIdRatesRateIdDelete
     */
    readonly id: number

    /**
     * The rate to remove
     * @type {number}
     * @memberof ProjectApiApiProjectsIdRatesRateIdDelete
     */
    readonly rateId: number
}

/**
 * Request parameters for apiProjectsPost operation in ProjectApi.
 * @export
 * @interface ProjectApiApiProjectsPostRequest
 */
export interface ProjectApiApiProjectsPostRequest {
    /**
     * 
     * @type {ProjectEditForm}
     * @memberof ProjectApiApiProjectsPost
     */
    readonly body: ProjectEditForm
}

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Returns a collection of projects.
     * @param {ProjectApiApiProjectsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsGet(requestParameters: ProjectApiApiProjectsGetRequest = {}, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectsGet(requestParameters.customer, requestParameters.customers, requestParameters.visible, requestParameters.start, requestParameters.end, requestParameters.ignoreDates, requestParameters.order, requestParameters.orderBy, requestParameters.term, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns one project
     * @param {ProjectApiApiProjectsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsIdGet(requestParameters: ProjectApiApiProjectsIdGetRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets the value of a meta-field for an existing project
     * @param {ProjectApiApiProjectsIdMetaPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsIdMetaPatch(requestParameters: ProjectApiApiProjectsIdMetaPatchRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectsIdMetaPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing project, you can pass all or just a subset of all attributes
     * @summary Update an existing project
     * @param {ProjectApiApiProjectsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsIdPatch(requestParameters: ProjectApiApiProjectsIdPatchRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectsIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a collection of all rates for one project
     * @param {ProjectApiApiProjectsIdRatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsIdRatesGet(requestParameters: ProjectApiApiProjectsIdRatesGetRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectsIdRatesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a new rate to an project
     * @param {ProjectApiApiProjectsIdRatesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsIdRatesPost(requestParameters: ProjectApiApiProjectsIdRatesPostRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectsIdRatesPost(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes one rate for an project
     * @param {ProjectApiApiProjectsIdRatesRateIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsIdRatesRateIdDelete(requestParameters: ProjectApiApiProjectsIdRatesRateIdDeleteRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectsIdRatesRateIdDelete(requestParameters.id, requestParameters.rateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new project and returns it afterwards
     * @summary Creates a new project
     * @param {ProjectApiApiProjectsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public apiProjectsPost(requestParameters: ProjectApiApiProjectsPostRequest, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).apiProjectsPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
