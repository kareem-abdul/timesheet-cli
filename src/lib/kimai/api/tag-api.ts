/* tslint:disable */
/* eslint-disable */
/**
 * Kimai - API Docs
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json) 
 *
 * The version of the OpenAPI document: 0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TagEditForm } from '../models';
// @ts-ignore
import { TagEntity } from '../models';
/**
 * TagApi - axios parameter creator
 * @export
 */
export const TagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Fetch all existing tags
         * @param {string} [name] Search term to filter tag list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsGet: async (name?: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id Tag ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsIdDelete: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTagsIdDelete', 'id', id)
            const localVarPath = `/api/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new tag and returns it afterwards
         * @summary Creates a new tag
         * @param {TagEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsPost: async (body: TagEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiTagsPost', 'body', body)
            const localVarPath = `/api/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagApi - functional programming interface
 * @export
 */
export const TagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Fetch all existing tags
         * @param {string} [name] Search term to filter tag list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsGet(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsGet(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id Tag ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new tag and returns it afterwards
         * @summary Creates a new tag
         * @param {TagEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTagsPost(body: TagEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTagsPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagApi - factory interface
 * @export
 */
export const TagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagApiFp(configuration)
    return {
        /**
         * 
         * @summary Fetch all existing tags
         * @param {string} [name] Search term to filter tag list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsGet(name?: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiTagsGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a tag
         * @param {number} id Tag ID to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiTagsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new tag and returns it afterwards
         * @summary Creates a new tag
         * @param {TagEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTagsPost(body: TagEditForm, options?: any): AxiosPromise<TagEntity> {
            return localVarFp.apiTagsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiTagsGet operation in TagApi.
 * @export
 * @interface TagApiApiTagsGetRequest
 */
export interface TagApiApiTagsGetRequest {
    /**
     * Search term to filter tag list
     * @type {string}
     * @memberof TagApiApiTagsGet
     */
    readonly name?: string
}

/**
 * Request parameters for apiTagsIdDelete operation in TagApi.
 * @export
 * @interface TagApiApiTagsIdDeleteRequest
 */
export interface TagApiApiTagsIdDeleteRequest {
    /**
     * Tag ID to delete
     * @type {number}
     * @memberof TagApiApiTagsIdDelete
     */
    readonly id: number
}

/**
 * Request parameters for apiTagsPost operation in TagApi.
 * @export
 * @interface TagApiApiTagsPostRequest
 */
export interface TagApiApiTagsPostRequest {
    /**
     * 
     * @type {TagEditForm}
     * @memberof TagApiApiTagsPost
     */
    readonly body: TagEditForm
}

/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export class TagApi extends BaseAPI {
    /**
     * 
     * @summary Fetch all existing tags
     * @param {TagApiApiTagsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagsGet(requestParameters: TagApiApiTagsGetRequest = {}, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsGet(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a tag
     * @param {TagApiApiTagsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagsIdDelete(requestParameters: TagApiApiTagsIdDeleteRequest, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new tag and returns it afterwards
     * @summary Creates a new tag
     * @param {TagApiApiTagsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    public apiTagsPost(requestParameters: TagApiApiTagsPostRequest, options?: AxiosRequestConfig) {
        return TagApiFp(this.configuration).apiTagsPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
