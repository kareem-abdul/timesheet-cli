/* tslint:disable */
/* eslint-disable */
/**
 * Kimai - API Docs
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json) 
 *
 * The version of the OpenAPI document: 0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiActivitiesIdMetaPatchRequest } from '../models';
// @ts-ignore
import { CustomerCollection } from '../models';
// @ts-ignore
import { CustomerEditForm } from '../models';
// @ts-ignore
import { CustomerEntity } from '../models';
// @ts-ignore
import { CustomerRate } from '../models';
// @ts-ignore
import { CustomerRateForm } from '../models';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a collection of customers
         * @param {string} [visible] Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name (default: name)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersGet: async (visible?: string, order?: string, orderBy?: string, term?: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            const localVarPath = `/api/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)

            if (visible !== undefined) {
                localVarQueryParameter['visible'] = visible;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns one customer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdGet: async (id: string, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomersIdGet', 'id', id)
            const localVarPath = `/api/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing customer
         * @param {number} id Customer record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdMetaPatch: async (id: number, body?: ApiActivitiesIdMetaPatchRequest, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomersIdMetaPatch', 'id', id)
            const localVarPath = `/api/customers/{id}/meta`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing customer, you can pass all or just a subset of all attributes
         * @summary Update an existing customer
         * @param {number} id Customer ID to update
         * @param {CustomerEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdPatch: async (id: number, body: CustomerEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomersIdPatch', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiCustomersIdPatch', 'body', body)
            const localVarPath = `/api/customers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a collection of all rates for one customer
         * @param {number} id The customer whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdRatesGet: async (id: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomersIdRatesGet', 'id', id)
            const localVarPath = `/api/customers/{id}/rates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Adds a new rate to a customer
         * @param {number} id The customer to add the rate for
         * @param {CustomerRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdRatesPost: async (id: number, body: CustomerRateForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomersIdRatesPost', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiCustomersIdRatesPost', 'body', body)
            const localVarPath = `/api/customers/{id}/rates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes one rate for an customer
         * @param {number} id The customer whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdRatesRateIdDelete: async (id: number, rateId: number, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCustomersIdRatesRateIdDelete', 'id', id)
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('apiCustomersIdRatesRateIdDelete', 'rateId', rateId)
            const localVarPath = `/api/customers/{id}/rates/{rateId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"rateId"}}`, encodeURIComponent(String(rateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new customer and returns it afterwards
         * @summary Creates a new customer
         * @param {CustomerEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersPost: async (body: CustomerEditForm, options: AxiosRequestConfig = {} as AxiosRequestConfig): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('apiCustomersPost', 'body', body)
            const localVarPath = `/api/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiToken required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-TOKEN", configuration)

            // authentication apiUser required
            await setApiKeyToObject(localVarHeaderParameter, "X-AUTH-USER", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a collection of customers
         * @param {string} [visible] Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name (default: name)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersGet(visible?: string, order?: string, orderBy?: string, term?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerCollection>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersGet(visible, order, orderBy, term, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns one customer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing customer
         * @param {number} id Customer record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersIdMetaPatch(id: number, body?: ApiActivitiesIdMetaPatchRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersIdMetaPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing customer, you can pass all or just a subset of all attributes
         * @summary Update an existing customer
         * @param {number} id Customer ID to update
         * @param {CustomerEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersIdPatch(id: number, body: CustomerEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersIdPatch(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a collection of all rates for one customer
         * @param {number} id The customer whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersIdRatesGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerRate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersIdRatesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Adds a new rate to a customer
         * @param {number} id The customer to add the rate for
         * @param {CustomerRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersIdRatesPost(id: number, body: CustomerRateForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerRate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersIdRatesPost(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes one rate for an customer
         * @param {number} id The customer whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersIdRatesRateIdDelete(id: number, rateId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersIdRatesRateIdDelete(id, rateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new customer and returns it afterwards
         * @summary Creates a new customer
         * @param {CustomerEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCustomersPost(body: CustomerEditForm, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCustomersPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a collection of customers
         * @param {string} [visible] Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both)
         * @param {string} [order] The result order. Allowed values: ASC, DESC (default: ASC)
         * @param {string} [orderBy] The field by which results will be ordered. Allowed values: id, name (default: name)
         * @param {string} [term] Free search term
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersGet(visible?: string, order?: string, orderBy?: string, term?: string, options?: any): AxiosPromise<Array<CustomerCollection>> {
            return localVarFp.apiCustomersGet(visible, order, orderBy, term, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns one customer
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdGet(id: string, options?: any): AxiosPromise<CustomerEntity> {
            return localVarFp.apiCustomersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sets the value of a meta-field for an existing customer
         * @param {number} id Customer record ID to set the meta-field value for
         * @param {ApiActivitiesIdMetaPatchRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdMetaPatch(id: number, body?: ApiActivitiesIdMetaPatchRequest, options?: any): AxiosPromise<CustomerEntity> {
            return localVarFp.apiCustomersIdMetaPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing customer, you can pass all or just a subset of all attributes
         * @summary Update an existing customer
         * @param {number} id Customer ID to update
         * @param {CustomerEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdPatch(id: number, body: CustomerEditForm, options?: any): AxiosPromise<CustomerEntity> {
            return localVarFp.apiCustomersIdPatch(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a collection of all rates for one customer
         * @param {number} id The customer whose rates will be returned
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdRatesGet(id: number, options?: any): AxiosPromise<Array<CustomerRate>> {
            return localVarFp.apiCustomersIdRatesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Adds a new rate to a customer
         * @param {number} id The customer to add the rate for
         * @param {CustomerRateForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdRatesPost(id: number, body: CustomerRateForm, options?: any): AxiosPromise<CustomerRate> {
            return localVarFp.apiCustomersIdRatesPost(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes one rate for an customer
         * @param {number} id The customer whose rate will be removed
         * @param {number} rateId The rate to remove
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersIdRatesRateIdDelete(id: number, rateId: number, options?: any): AxiosPromise<void> {
            return localVarFp.apiCustomersIdRatesRateIdDelete(id, rateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new customer and returns it afterwards
         * @summary Creates a new customer
         * @param {CustomerEditForm} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCustomersPost(body: CustomerEditForm, options?: any): AxiosPromise<CustomerEntity> {
            return localVarFp.apiCustomersPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiCustomersGet operation in CustomerApi.
 * @export
 * @interface CustomerApiApiCustomersGetRequest
 */
export interface CustomerApiApiCustomersGetRequest {
    /**
     * Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both)
     * @type {string}
     * @memberof CustomerApiApiCustomersGet
     */
    readonly visible?: string

    /**
     * The result order. Allowed values: ASC, DESC (default: ASC)
     * @type {string}
     * @memberof CustomerApiApiCustomersGet
     */
    readonly order?: string

    /**
     * The field by which results will be ordered. Allowed values: id, name (default: name)
     * @type {string}
     * @memberof CustomerApiApiCustomersGet
     */
    readonly orderBy?: string

    /**
     * Free search term
     * @type {string}
     * @memberof CustomerApiApiCustomersGet
     */
    readonly term?: string
}

/**
 * Request parameters for apiCustomersIdGet operation in CustomerApi.
 * @export
 * @interface CustomerApiApiCustomersIdGetRequest
 */
export interface CustomerApiApiCustomersIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CustomerApiApiCustomersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for apiCustomersIdMetaPatch operation in CustomerApi.
 * @export
 * @interface CustomerApiApiCustomersIdMetaPatchRequest
 */
export interface CustomerApiApiCustomersIdMetaPatchRequest {
    /**
     * Customer record ID to set the meta-field value for
     * @type {number}
     * @memberof CustomerApiApiCustomersIdMetaPatch
     */
    readonly id: number

    /**
     * 
     * @type {ApiActivitiesIdMetaPatchRequest}
     * @memberof CustomerApiApiCustomersIdMetaPatch
     */
    readonly body?: ApiActivitiesIdMetaPatchRequest
}

/**
 * Request parameters for apiCustomersIdPatch operation in CustomerApi.
 * @export
 * @interface CustomerApiApiCustomersIdPatchRequest
 */
export interface CustomerApiApiCustomersIdPatchRequest {
    /**
     * Customer ID to update
     * @type {number}
     * @memberof CustomerApiApiCustomersIdPatch
     */
    readonly id: number

    /**
     * 
     * @type {CustomerEditForm}
     * @memberof CustomerApiApiCustomersIdPatch
     */
    readonly body: CustomerEditForm
}

/**
 * Request parameters for apiCustomersIdRatesGet operation in CustomerApi.
 * @export
 * @interface CustomerApiApiCustomersIdRatesGetRequest
 */
export interface CustomerApiApiCustomersIdRatesGetRequest {
    /**
     * The customer whose rates will be returned
     * @type {number}
     * @memberof CustomerApiApiCustomersIdRatesGet
     */
    readonly id: number
}

/**
 * Request parameters for apiCustomersIdRatesPost operation in CustomerApi.
 * @export
 * @interface CustomerApiApiCustomersIdRatesPostRequest
 */
export interface CustomerApiApiCustomersIdRatesPostRequest {
    /**
     * The customer to add the rate for
     * @type {number}
     * @memberof CustomerApiApiCustomersIdRatesPost
     */
    readonly id: number

    /**
     * 
     * @type {CustomerRateForm}
     * @memberof CustomerApiApiCustomersIdRatesPost
     */
    readonly body: CustomerRateForm
}

/**
 * Request parameters for apiCustomersIdRatesRateIdDelete operation in CustomerApi.
 * @export
 * @interface CustomerApiApiCustomersIdRatesRateIdDeleteRequest
 */
export interface CustomerApiApiCustomersIdRatesRateIdDeleteRequest {
    /**
     * The customer whose rate will be removed
     * @type {number}
     * @memberof CustomerApiApiCustomersIdRatesRateIdDelete
     */
    readonly id: number

    /**
     * The rate to remove
     * @type {number}
     * @memberof CustomerApiApiCustomersIdRatesRateIdDelete
     */
    readonly rateId: number
}

/**
 * Request parameters for apiCustomersPost operation in CustomerApi.
 * @export
 * @interface CustomerApiApiCustomersPostRequest
 */
export interface CustomerApiApiCustomersPostRequest {
    /**
     * 
     * @type {CustomerEditForm}
     * @memberof CustomerApiApiCustomersPost
     */
    readonly body: CustomerEditForm
}

/**
 * CustomerApi - object-oriented interface
 * @export
 * @class CustomerApi
 * @extends {BaseAPI}
 */
export class CustomerApi extends BaseAPI {
    /**
     * 
     * @summary Returns a collection of customers
     * @param {CustomerApiApiCustomersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiCustomersGet(requestParameters: CustomerApiApiCustomersGetRequest = {}, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).apiCustomersGet(requestParameters.visible, requestParameters.order, requestParameters.orderBy, requestParameters.term, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns one customer
     * @param {CustomerApiApiCustomersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiCustomersIdGet(requestParameters: CustomerApiApiCustomersIdGetRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).apiCustomersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sets the value of a meta-field for an existing customer
     * @param {CustomerApiApiCustomersIdMetaPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiCustomersIdMetaPatch(requestParameters: CustomerApiApiCustomersIdMetaPatchRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).apiCustomersIdMetaPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing customer, you can pass all or just a subset of all attributes
     * @summary Update an existing customer
     * @param {CustomerApiApiCustomersIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiCustomersIdPatch(requestParameters: CustomerApiApiCustomersIdPatchRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).apiCustomersIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a collection of all rates for one customer
     * @param {CustomerApiApiCustomersIdRatesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiCustomersIdRatesGet(requestParameters: CustomerApiApiCustomersIdRatesGetRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).apiCustomersIdRatesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Adds a new rate to a customer
     * @param {CustomerApiApiCustomersIdRatesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiCustomersIdRatesPost(requestParameters: CustomerApiApiCustomersIdRatesPostRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).apiCustomersIdRatesPost(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes one rate for an customer
     * @param {CustomerApiApiCustomersIdRatesRateIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiCustomersIdRatesRateIdDelete(requestParameters: CustomerApiApiCustomersIdRatesRateIdDeleteRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).apiCustomersIdRatesRateIdDelete(requestParameters.id, requestParameters.rateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new customer and returns it afterwards
     * @summary Creates a new customer
     * @param {CustomerApiApiCustomersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApi
     */
    public apiCustomersPost(requestParameters: CustomerApiApiCustomersPostRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).apiCustomersPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
